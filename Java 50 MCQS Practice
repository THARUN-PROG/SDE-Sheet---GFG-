1. class Base {
    public void show() {
       System.out.println("Base::show() called");
    }
}
   
class Derived extends Base {
    public void show() {
       System.out.println("Derived::show() called");
    }
}
   
public class Main {
    public static void main(String[] args) {
        Base b = new Derived();;
        b.show();
    }
}


O/P:  Derived::show() called
In the above Program, b is the reference of base type and object of derived class. In java, functions are virtual by default. So, the run time polymorphism happens and derived fun() is called



2. What is the use of final keyword in Java?

(A) When a class is made final, a sublcass of it can not be created.
(B) When a method is final, it can not be overridden.
(C) When a variable is final, it can be assigned value only once.
(D) All of the above  - Ans:



3. class Base {
    final public void show() {
       System.out.println("Base::show() called");
    }
}
   
class Derived extends Base {
    public void show() {
       System.out.println("Derived::show() called");
    }
}
   
class Main {
    public static void main(String[] args) {
        Base b = new Derived();;
        b.show();
    }
}

O/P: Compile Time Error
Exp: Final Methods cannot be overridden



4. class Base {
    public static void show() {
       System.out.println("Base::show() called");
    }
}
   
class Derived extends Base {
    public static void show() {
       System.out.println("Derived::show() called");
    }
}
   
class Main {
    public static void main(String[] args) {
        Base b = new Derived();
        b.show();
    }
}


O/P: Base::show() called
Exp: Like C++, when a function is static, runtime polymorphism doesn’t happen.



5. Which of the following is FALSE about arrays on Java
(A) A java array is always an object
(B) Length of array can be changed after creation of array  - Ans:
(C) Arrays in Java are always allocated on heap  

Exp:- In Java, arrays are objects, they have members like length. The length member is final and cannot be changed. 
All objects are allocated on heap in Java, so arrays are also allocated on heap.



6. package main;
class T {
  int t = 20;
}
class Main {
   public static void main(String args[]) {
      T t1 = new T();
      System.out.println(t1.t);
   }
}


O/P: 20
Exp:- In java, member variables can assigned a value with declaration. In C++, only static const variables can be assigned like this.




7. class T {
  int t = 20;
  T() {
    t = 40;
  }
}
class Main {
   public static void main(String args[]) {
      T t1 = new T();
      System.out.println(t1.t);
   }
}

O/P: 40
Exp: The values assigned inside constructor overwrite the values initialized with declaration.



8. Which of the following is FALSE about abstract classes in Java
(A) If we derive an abstract class and do not implement all the abstract methods, then the derived class should also be marked as abstract using ‘abstract’ keyword
(B) Abstract classes can have constructors
(C) A class can be made abstract without any abstract method
(D) A class can inherit from multiple abstract classes. - Ans:



9. // file name: Main.java
public class Main {
    public static void main(String args[]) {
       int arr[] = {10, 20, 30, 40, 50};
       for(int i=0; i < arr.length; i++)
       {
             System.out.print(" " + arr[i]);              
       }
    }
}

O/P: 10 20 30 40 50
Exp: It is a simple program where an array is first created then traversed. 
The important thing to note is, unlike C++, arrays are first class objects in Java. 
For example, in the following program, size of array is accessed using length which is a member of arr[] object.



10. Which of the following is true about interfaces in java.

1) An interface can contain following type of members.
....public, static, final fields (i.e., constants) 
....default and static methods with bodies

2) An instance of interface can be created.

3) A class can implement multiple interfaces.

4) Many classes can implement the same interface.


Ans: 1,3,4
Exp: The instance of an interface cannot be created, because it acts as an abstract class. 



11. Which of the following is true about inheritance in Java. 
1) In Java all classes inherit from the Object class directly or indirectly. The Object class is root of all classes. 
2) Multiple inheritance is not allowed in Java. 
3) Unlike C++, there is nothing like type of inheritance in Java where we can specify whether the inheritance is protected, public or private.

Ans: 1,2,3 - All of the above



12. final class Complex {
 
    private final double re;
    private final double im;
 
    public Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
 
    public String toString() {
        return "(" + rem + " + " + im + "i)";
    }
}
 
class Main {
  public static void main(String args[])
  {
       Complex c = new Complex(10, 15);
       System.out.println("Complex number is " + c);
  }         
}


O/P: Complex number is (10.0 + 15.0i)










